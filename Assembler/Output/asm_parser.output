Terminals unused in grammar

    ERROR
    DOLLAR


Grammar

    0 $accept: prog $end

    1 prog: prog ENDFILE
    2     | prog stmt
    3     | stmt

    4 stmt: add_stmt
    5     | sub_stmt
    6     | or_stmt
    7     | and_stmt
    8     | not_stmt
    9     | xor_stmt
   10     | cmp_stmt
   11     | branch_stmt
   12     | move_stmt
   13     | jump_stmt
   14     | load_stmt
   15     | store_stmt
   16     | push_stmt
   17     | pop_stmt
   18     | reti_stmt
   19     | halt_stmt
   20     | nop_stmt
   21     | byte_stmt
   22     | word_stmt
   23     | alloc_stmt
   24     | org_stmt
   25     | equ_stmt
   26     | label

   27 add_stmt: ADD REG COMMA REG COMMA REG
   28         | ADD REG COMMA REG COMMA CARDINAL NUMBER

   29 sub_stmt: SUB REG COMMA REG COMMA REG
   30         | SUB REG COMMA REG COMMA CARDINAL NUMBER

   31 or_stmt: OR REG COMMA REG COMMA REG
   32        | OR REG COMMA REG COMMA CARDINAL NUMBER

   33 and_stmt: AND REG COMMA REG COMMA REG
   34         | AND REG COMMA REG COMMA CARDINAL NUMBER

   35 xor_stmt: XOR REG COMMA REG COMMA REG
   36         | XOR REG COMMA REG COMMA CARDINAL NUMBER

   37 not_stmt: NOT REG COMMA REG
   38         | NOT REG COMMA CARDINAL NUMBER

   39 cmp_stmt: CMP REG COMMA REG

   40 branch_stmt: BRANCH IDENTIFIER

   41 move_stmt: MOVE REG COMMA REG

   42 jump_stmt: JUMP REG COMMA CARDINAL NUMBER
   43          | JUMP_LINK REG COMMA REG COMMA CARDINAL NUMBER

   44 load_stmt: LOAD_DIRECT REG COMMA CARDINAL NUMBER
   45          | LOAD_IMMEDIATE REG COMMA CARDINAL NUMBER
   46          | LOAD_INDEXED REG COMMA REG COMMA CARDINAL NUMBER

   47 store_stmt: STORE_DIRECT REG COMMA CARDINAL NUMBER
   48           | STORE_INDEXED REG COMMA REG COMMA CARDINAL NUMBER

   49 push_stmt: PUSH REG

   50 pop_stmt: POP REG

   51 reti_stmt: RETI

   52 halt_stmt: HALT

   53 nop_stmt: NOP

   54 byte_stmt: BYTE NUMBER

   55 word_stmt: WORD NUMBER

   56 alloc_stmt: ALLOC IDENTIFIER NUMBER

   57 org_stmt: ORG NUMBER

   58 equ_stmt: EQU IDENTIFIER COMMA NUMBER

   59 label: IDENTIFIER COLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ADD (258) 27 28
    SUB (259) 29 30
    OR (260) 31 32
    AND (261) 33 34
    NOT (262) 37 38
    XOR (263) 35 36
    CMP (264) 39
    BRANCH (265) 40
    JUMP (266) 42
    JUMP_LINK (267) 43
    MOVE (268) 41
    LOAD_DIRECT (269) 44
    LOAD_IMMEDIATE (270) 45
    LOAD_INDEXED (271) 46
    STORE_DIRECT (272) 47
    STORE_INDEXED (273) 48
    PUSH (274) 49
    POP (275) 50
    RETI (276) 51
    HALT (277) 52
    NOP (278) 53
    NUMBER (279) 28 30 32 34 36 38 42 43 44 45 46 47 48 54 55 56 57 58
    REG (280) 27 28 29 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46 47 48 49 50
    IDENTIFIER (281) 40 56 58 59
    ENDFILE (282) 1
    ERROR (283)
    COMMA (284) 27 28 29 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46 47 48 58
    CARDINAL (285) 28 30 32 34 36 38 42 43 44 45 46 47 48
    COLON (286) 59
    DOLLAR (287)
    BYTE (288) 54
    WORD (289) 55
    ALLOC (290) 56
    ORG (291) 57
    EQU (292) 58


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    prog (39)
        on left: 1 2 3
        on right: 0 1 2
    stmt (40)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
        on right: 2 3
    add_stmt (41)
        on left: 27 28
        on right: 4
    sub_stmt (42)
        on left: 29 30
        on right: 5
    or_stmt (43)
        on left: 31 32
        on right: 6
    and_stmt (44)
        on left: 33 34
        on right: 7
    xor_stmt (45)
        on left: 35 36
        on right: 9
    not_stmt (46)
        on left: 37 38
        on right: 8
    cmp_stmt (47)
        on left: 39
        on right: 10
    branch_stmt (48)
        on left: 40
        on right: 11
    move_stmt (49)
        on left: 41
        on right: 12
    jump_stmt (50)
        on left: 42 43
        on right: 13
    load_stmt (51)
        on left: 44 45 46
        on right: 14
    store_stmt (52)
        on left: 47 48
        on right: 15
    push_stmt (53)
        on left: 49
        on right: 16
    pop_stmt (54)
        on left: 50
        on right: 17
    reti_stmt (55)
        on left: 51
        on right: 18
    halt_stmt (56)
        on left: 52
        on right: 19
    nop_stmt (57)
        on left: 53
        on right: 20
    byte_stmt (58)
        on left: 54
        on right: 21
    word_stmt (59)
        on left: 55
        on right: 22
    alloc_stmt (60)
        on left: 56
        on right: 23
    org_stmt (61)
        on left: 57
        on right: 24
    equ_stmt (62)
        on left: 58
        on right: 25
    label (63)
        on left: 59
        on right: 26


State 0

    0 $accept: • prog $end

    ADD             shift, and go to state 1
    SUB             shift, and go to state 2
    OR              shift, and go to state 3
    AND             shift, and go to state 4
    NOT             shift, and go to state 5
    XOR             shift, and go to state 6
    CMP             shift, and go to state 7
    BRANCH          shift, and go to state 8
    JUMP            shift, and go to state 9
    JUMP_LINK       shift, and go to state 10
    MOVE            shift, and go to state 11
    LOAD_DIRECT     shift, and go to state 12
    LOAD_IMMEDIATE  shift, and go to state 13
    LOAD_INDEXED    shift, and go to state 14
    STORE_DIRECT    shift, and go to state 15
    STORE_INDEXED   shift, and go to state 16
    PUSH            shift, and go to state 17
    POP             shift, and go to state 18
    RETI            shift, and go to state 19
    HALT            shift, and go to state 20
    NOP             shift, and go to state 21
    IDENTIFIER      shift, and go to state 22
    BYTE            shift, and go to state 23
    WORD            shift, and go to state 24
    ALLOC           shift, and go to state 25
    ORG             shift, and go to state 26
    EQU             shift, and go to state 27

    prog         go to state 28
    stmt         go to state 29
    add_stmt     go to state 30
    sub_stmt     go to state 31
    or_stmt      go to state 32
    and_stmt     go to state 33
    xor_stmt     go to state 34
    not_stmt     go to state 35
    cmp_stmt     go to state 36
    branch_stmt  go to state 37
    move_stmt    go to state 38
    jump_stmt    go to state 39
    load_stmt    go to state 40
    store_stmt   go to state 41
    push_stmt    go to state 42
    pop_stmt     go to state 43
    reti_stmt    go to state 44
    halt_stmt    go to state 45
    nop_stmt     go to state 46
    byte_stmt    go to state 47
    word_stmt    go to state 48
    alloc_stmt   go to state 49
    org_stmt     go to state 50
    equ_stmt     go to state 51
    label        go to state 52


State 1

   27 add_stmt: ADD • REG COMMA REG COMMA REG
   28         | ADD • REG COMMA REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 53


State 2

   29 sub_stmt: SUB • REG COMMA REG COMMA REG
   30         | SUB • REG COMMA REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 54


State 3

   31 or_stmt: OR • REG COMMA REG COMMA REG
   32        | OR • REG COMMA REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 55


State 4

   33 and_stmt: AND • REG COMMA REG COMMA REG
   34         | AND • REG COMMA REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 56


State 5

   37 not_stmt: NOT • REG COMMA REG
   38         | NOT • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 57


State 6

   35 xor_stmt: XOR • REG COMMA REG COMMA REG
   36         | XOR • REG COMMA REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 58


State 7

   39 cmp_stmt: CMP • REG COMMA REG

    REG  shift, and go to state 59


State 8

   40 branch_stmt: BRANCH • IDENTIFIER

    IDENTIFIER  shift, and go to state 60


State 9

   42 jump_stmt: JUMP • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 61


State 10

   43 jump_stmt: JUMP_LINK • REG COMMA REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 62


State 11

   41 move_stmt: MOVE • REG COMMA REG

    REG  shift, and go to state 63


State 12

   44 load_stmt: LOAD_DIRECT • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 64


State 13

   45 load_stmt: LOAD_IMMEDIATE • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 65


State 14

   46 load_stmt: LOAD_INDEXED • REG COMMA REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 66


State 15

   47 store_stmt: STORE_DIRECT • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 67


State 16

   48 store_stmt: STORE_INDEXED • REG COMMA REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 68


State 17

   49 push_stmt: PUSH • REG

    REG  shift, and go to state 69


State 18

   50 pop_stmt: POP • REG

    REG  shift, and go to state 70


State 19

   51 reti_stmt: RETI •

    $default  reduce using rule 51 (reti_stmt)


State 20

   52 halt_stmt: HALT •

    $default  reduce using rule 52 (halt_stmt)


State 21

   53 nop_stmt: NOP •

    $default  reduce using rule 53 (nop_stmt)


State 22

   59 label: IDENTIFIER • COLON

    COLON  shift, and go to state 71


State 23

   54 byte_stmt: BYTE • NUMBER

    NUMBER  shift, and go to state 72


State 24

   55 word_stmt: WORD • NUMBER

    NUMBER  shift, and go to state 73


State 25

   56 alloc_stmt: ALLOC • IDENTIFIER NUMBER

    IDENTIFIER  shift, and go to state 74


State 26

   57 org_stmt: ORG • NUMBER

    NUMBER  shift, and go to state 75


State 27

   58 equ_stmt: EQU • IDENTIFIER COMMA NUMBER

    IDENTIFIER  shift, and go to state 76


State 28

    0 $accept: prog • $end
    1 prog: prog • ENDFILE
    2     | prog • stmt

    $end            shift, and go to state 77
    ADD             shift, and go to state 1
    SUB             shift, and go to state 2
    OR              shift, and go to state 3
    AND             shift, and go to state 4
    NOT             shift, and go to state 5
    XOR             shift, and go to state 6
    CMP             shift, and go to state 7
    BRANCH          shift, and go to state 8
    JUMP            shift, and go to state 9
    JUMP_LINK       shift, and go to state 10
    MOVE            shift, and go to state 11
    LOAD_DIRECT     shift, and go to state 12
    LOAD_IMMEDIATE  shift, and go to state 13
    LOAD_INDEXED    shift, and go to state 14
    STORE_DIRECT    shift, and go to state 15
    STORE_INDEXED   shift, and go to state 16
    PUSH            shift, and go to state 17
    POP             shift, and go to state 18
    RETI            shift, and go to state 19
    HALT            shift, and go to state 20
    NOP             shift, and go to state 21
    IDENTIFIER      shift, and go to state 22
    ENDFILE         shift, and go to state 78
    BYTE            shift, and go to state 23
    WORD            shift, and go to state 24
    ALLOC           shift, and go to state 25
    ORG             shift, and go to state 26
    EQU             shift, and go to state 27

    stmt         go to state 79
    add_stmt     go to state 30
    sub_stmt     go to state 31
    or_stmt      go to state 32
    and_stmt     go to state 33
    xor_stmt     go to state 34
    not_stmt     go to state 35
    cmp_stmt     go to state 36
    branch_stmt  go to state 37
    move_stmt    go to state 38
    jump_stmt    go to state 39
    load_stmt    go to state 40
    store_stmt   go to state 41
    push_stmt    go to state 42
    pop_stmt     go to state 43
    reti_stmt    go to state 44
    halt_stmt    go to state 45
    nop_stmt     go to state 46
    byte_stmt    go to state 47
    word_stmt    go to state 48
    alloc_stmt   go to state 49
    org_stmt     go to state 50
    equ_stmt     go to state 51
    label        go to state 52


State 29

    3 prog: stmt •

    $default  reduce using rule 3 (prog)


State 30

    4 stmt: add_stmt •

    $default  reduce using rule 4 (stmt)


State 31

    5 stmt: sub_stmt •

    $default  reduce using rule 5 (stmt)


State 32

    6 stmt: or_stmt •

    $default  reduce using rule 6 (stmt)


State 33

    7 stmt: and_stmt •

    $default  reduce using rule 7 (stmt)


State 34

    9 stmt: xor_stmt •

    $default  reduce using rule 9 (stmt)


State 35

    8 stmt: not_stmt •

    $default  reduce using rule 8 (stmt)


State 36

   10 stmt: cmp_stmt •

    $default  reduce using rule 10 (stmt)


State 37

   11 stmt: branch_stmt •

    $default  reduce using rule 11 (stmt)


State 38

   12 stmt: move_stmt •

    $default  reduce using rule 12 (stmt)


State 39

   13 stmt: jump_stmt •

    $default  reduce using rule 13 (stmt)


State 40

   14 stmt: load_stmt •

    $default  reduce using rule 14 (stmt)


State 41

   15 stmt: store_stmt •

    $default  reduce using rule 15 (stmt)


State 42

   16 stmt: push_stmt •

    $default  reduce using rule 16 (stmt)


State 43

   17 stmt: pop_stmt •

    $default  reduce using rule 17 (stmt)


State 44

   18 stmt: reti_stmt •

    $default  reduce using rule 18 (stmt)


State 45

   19 stmt: halt_stmt •

    $default  reduce using rule 19 (stmt)


State 46

   20 stmt: nop_stmt •

    $default  reduce using rule 20 (stmt)


State 47

   21 stmt: byte_stmt •

    $default  reduce using rule 21 (stmt)


State 48

   22 stmt: word_stmt •

    $default  reduce using rule 22 (stmt)


State 49

   23 stmt: alloc_stmt •

    $default  reduce using rule 23 (stmt)


State 50

   24 stmt: org_stmt •

    $default  reduce using rule 24 (stmt)


State 51

   25 stmt: equ_stmt •

    $default  reduce using rule 25 (stmt)


State 52

   26 stmt: label •

    $default  reduce using rule 26 (stmt)


State 53

   27 add_stmt: ADD REG • COMMA REG COMMA REG
   28         | ADD REG • COMMA REG COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 80


State 54

   29 sub_stmt: SUB REG • COMMA REG COMMA REG
   30         | SUB REG • COMMA REG COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 81


State 55

   31 or_stmt: OR REG • COMMA REG COMMA REG
   32        | OR REG • COMMA REG COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 82


State 56

   33 and_stmt: AND REG • COMMA REG COMMA REG
   34         | AND REG • COMMA REG COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 83


State 57

   37 not_stmt: NOT REG • COMMA REG
   38         | NOT REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 84


State 58

   35 xor_stmt: XOR REG • COMMA REG COMMA REG
   36         | XOR REG • COMMA REG COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 85


State 59

   39 cmp_stmt: CMP REG • COMMA REG

    COMMA  shift, and go to state 86


State 60

   40 branch_stmt: BRANCH IDENTIFIER •

    $default  reduce using rule 40 (branch_stmt)


State 61

   42 jump_stmt: JUMP REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 87


State 62

   43 jump_stmt: JUMP_LINK REG • COMMA REG COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 88


State 63

   41 move_stmt: MOVE REG • COMMA REG

    COMMA  shift, and go to state 89


State 64

   44 load_stmt: LOAD_DIRECT REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 90


State 65

   45 load_stmt: LOAD_IMMEDIATE REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 91


State 66

   46 load_stmt: LOAD_INDEXED REG • COMMA REG COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 92


State 67

   47 store_stmt: STORE_DIRECT REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 93


State 68

   48 store_stmt: STORE_INDEXED REG • COMMA REG COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 94


State 69

   49 push_stmt: PUSH REG •

    $default  reduce using rule 49 (push_stmt)


State 70

   50 pop_stmt: POP REG •

    $default  reduce using rule 50 (pop_stmt)


State 71

   59 label: IDENTIFIER COLON •

    $default  reduce using rule 59 (label)


State 72

   54 byte_stmt: BYTE NUMBER •

    $default  reduce using rule 54 (byte_stmt)


State 73

   55 word_stmt: WORD NUMBER •

    $default  reduce using rule 55 (word_stmt)


State 74

   56 alloc_stmt: ALLOC IDENTIFIER • NUMBER

    NUMBER  shift, and go to state 95


State 75

   57 org_stmt: ORG NUMBER •

    $default  reduce using rule 57 (org_stmt)


State 76

   58 equ_stmt: EQU IDENTIFIER • COMMA NUMBER

    COMMA  shift, and go to state 96


State 77

    0 $accept: prog $end •

    $default  accept


State 78

    1 prog: prog ENDFILE •

    $default  reduce using rule 1 (prog)


State 79

    2 prog: prog stmt •

    $default  reduce using rule 2 (prog)


State 80

   27 add_stmt: ADD REG COMMA • REG COMMA REG
   28         | ADD REG COMMA • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 97


State 81

   29 sub_stmt: SUB REG COMMA • REG COMMA REG
   30         | SUB REG COMMA • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 98


State 82

   31 or_stmt: OR REG COMMA • REG COMMA REG
   32        | OR REG COMMA • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 99


State 83

   33 and_stmt: AND REG COMMA • REG COMMA REG
   34         | AND REG COMMA • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 100


State 84

   37 not_stmt: NOT REG COMMA • REG
   38         | NOT REG COMMA • CARDINAL NUMBER

    REG       shift, and go to state 101
    CARDINAL  shift, and go to state 102


State 85

   35 xor_stmt: XOR REG COMMA • REG COMMA REG
   36         | XOR REG COMMA • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 103


State 86

   39 cmp_stmt: CMP REG COMMA • REG

    REG  shift, and go to state 104


State 87

   42 jump_stmt: JUMP REG COMMA • CARDINAL NUMBER

    CARDINAL  shift, and go to state 105


State 88

   43 jump_stmt: JUMP_LINK REG COMMA • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 106


State 89

   41 move_stmt: MOVE REG COMMA • REG

    REG  shift, and go to state 107


State 90

   44 load_stmt: LOAD_DIRECT REG COMMA • CARDINAL NUMBER

    CARDINAL  shift, and go to state 108


State 91

   45 load_stmt: LOAD_IMMEDIATE REG COMMA • CARDINAL NUMBER

    CARDINAL  shift, and go to state 109


State 92

   46 load_stmt: LOAD_INDEXED REG COMMA • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 110


State 93

   47 store_stmt: STORE_DIRECT REG COMMA • CARDINAL NUMBER

    CARDINAL  shift, and go to state 111


State 94

   48 store_stmt: STORE_INDEXED REG COMMA • REG COMMA CARDINAL NUMBER

    REG  shift, and go to state 112


State 95

   56 alloc_stmt: ALLOC IDENTIFIER NUMBER •

    $default  reduce using rule 56 (alloc_stmt)


State 96

   58 equ_stmt: EQU IDENTIFIER COMMA • NUMBER

    NUMBER  shift, and go to state 113


State 97

   27 add_stmt: ADD REG COMMA REG • COMMA REG
   28         | ADD REG COMMA REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 114


State 98

   29 sub_stmt: SUB REG COMMA REG • COMMA REG
   30         | SUB REG COMMA REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 115


State 99

   31 or_stmt: OR REG COMMA REG • COMMA REG
   32        | OR REG COMMA REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 116


State 100

   33 and_stmt: AND REG COMMA REG • COMMA REG
   34         | AND REG COMMA REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 117


State 101

   37 not_stmt: NOT REG COMMA REG •

    $default  reduce using rule 37 (not_stmt)


State 102

   38 not_stmt: NOT REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 118


State 103

   35 xor_stmt: XOR REG COMMA REG • COMMA REG
   36         | XOR REG COMMA REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 119


State 104

   39 cmp_stmt: CMP REG COMMA REG •

    $default  reduce using rule 39 (cmp_stmt)


State 105

   42 jump_stmt: JUMP REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 120


State 106

   43 jump_stmt: JUMP_LINK REG COMMA REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 121


State 107

   41 move_stmt: MOVE REG COMMA REG •

    $default  reduce using rule 41 (move_stmt)


State 108

   44 load_stmt: LOAD_DIRECT REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 122


State 109

   45 load_stmt: LOAD_IMMEDIATE REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 123


State 110

   46 load_stmt: LOAD_INDEXED REG COMMA REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 124


State 111

   47 store_stmt: STORE_DIRECT REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 125


State 112

   48 store_stmt: STORE_INDEXED REG COMMA REG • COMMA CARDINAL NUMBER

    COMMA  shift, and go to state 126


State 113

   58 equ_stmt: EQU IDENTIFIER COMMA NUMBER •

    $default  reduce using rule 58 (equ_stmt)


State 114

   27 add_stmt: ADD REG COMMA REG COMMA • REG
   28         | ADD REG COMMA REG COMMA • CARDINAL NUMBER

    REG       shift, and go to state 127
    CARDINAL  shift, and go to state 128


State 115

   29 sub_stmt: SUB REG COMMA REG COMMA • REG
   30         | SUB REG COMMA REG COMMA • CARDINAL NUMBER

    REG       shift, and go to state 129
    CARDINAL  shift, and go to state 130


State 116

   31 or_stmt: OR REG COMMA REG COMMA • REG
   32        | OR REG COMMA REG COMMA • CARDINAL NUMBER

    REG       shift, and go to state 131
    CARDINAL  shift, and go to state 132


State 117

   33 and_stmt: AND REG COMMA REG COMMA • REG
   34         | AND REG COMMA REG COMMA • CARDINAL NUMBER

    REG       shift, and go to state 133
    CARDINAL  shift, and go to state 134


State 118

   38 not_stmt: NOT REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 38 (not_stmt)


State 119

   35 xor_stmt: XOR REG COMMA REG COMMA • REG
   36         | XOR REG COMMA REG COMMA • CARDINAL NUMBER

    REG       shift, and go to state 135
    CARDINAL  shift, and go to state 136


State 120

   42 jump_stmt: JUMP REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 42 (jump_stmt)


State 121

   43 jump_stmt: JUMP_LINK REG COMMA REG COMMA • CARDINAL NUMBER

    CARDINAL  shift, and go to state 137


State 122

   44 load_stmt: LOAD_DIRECT REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 44 (load_stmt)


State 123

   45 load_stmt: LOAD_IMMEDIATE REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 45 (load_stmt)


State 124

   46 load_stmt: LOAD_INDEXED REG COMMA REG COMMA • CARDINAL NUMBER

    CARDINAL  shift, and go to state 138


State 125

   47 store_stmt: STORE_DIRECT REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 47 (store_stmt)


State 126

   48 store_stmt: STORE_INDEXED REG COMMA REG COMMA • CARDINAL NUMBER

    CARDINAL  shift, and go to state 139


State 127

   27 add_stmt: ADD REG COMMA REG COMMA REG •

    $default  reduce using rule 27 (add_stmt)


State 128

   28 add_stmt: ADD REG COMMA REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 140


State 129

   29 sub_stmt: SUB REG COMMA REG COMMA REG •

    $default  reduce using rule 29 (sub_stmt)


State 130

   30 sub_stmt: SUB REG COMMA REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 141


State 131

   31 or_stmt: OR REG COMMA REG COMMA REG •

    $default  reduce using rule 31 (or_stmt)


State 132

   32 or_stmt: OR REG COMMA REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 142


State 133

   33 and_stmt: AND REG COMMA REG COMMA REG •

    $default  reduce using rule 33 (and_stmt)


State 134

   34 and_stmt: AND REG COMMA REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 143


State 135

   35 xor_stmt: XOR REG COMMA REG COMMA REG •

    $default  reduce using rule 35 (xor_stmt)


State 136

   36 xor_stmt: XOR REG COMMA REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 144


State 137

   43 jump_stmt: JUMP_LINK REG COMMA REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 145


State 138

   46 load_stmt: LOAD_INDEXED REG COMMA REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 146


State 139

   48 store_stmt: STORE_INDEXED REG COMMA REG COMMA CARDINAL • NUMBER

    NUMBER  shift, and go to state 147


State 140

   28 add_stmt: ADD REG COMMA REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 28 (add_stmt)


State 141

   30 sub_stmt: SUB REG COMMA REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 30 (sub_stmt)


State 142

   32 or_stmt: OR REG COMMA REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 32 (or_stmt)


State 143

   34 and_stmt: AND REG COMMA REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 34 (and_stmt)


State 144

   36 xor_stmt: XOR REG COMMA REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 36 (xor_stmt)


State 145

   43 jump_stmt: JUMP_LINK REG COMMA REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 43 (jump_stmt)


State 146

   46 load_stmt: LOAD_INDEXED REG COMMA REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 46 (load_stmt)


State 147

   48 store_stmt: STORE_INDEXED REG COMMA REG COMMA CARDINAL NUMBER •

    $default  reduce using rule 48 (store_stmt)
